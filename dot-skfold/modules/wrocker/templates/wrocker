#!/bin/sh

############################################################################
# Preamble of the documentation, start rows with #<H>
# Then create commands naming functions COMMAND_<name> and marking them
# with #<C>. Add command's documentation with #<CH>. See examples below,
# then remove this comment if you wish.
#
# Use @@@ in #<H> and #<CH> to expand to the image name.

#<H>
#<H> [% abstract %]
#<H> Copyright (C) [% year %] by [% author %] <[% email %]>
#<H>
#<H> This docker image @@@...
#<H>
#<H> - does this;
#<H> - does that.
#<H>
#<H> The following commands are available:


############################################################################
# Commands provided by the wrapper. Start each function with prefix
# COMMAND_ - it will be removed in the help output anyway

COMMAND_foo() { #<C>
#<CH> usage:  foo <arg> [<arg> ...]
#<CH>
#<CH> Put some foo in your low bar
   printf '%s\n' 'Go with the foo!'
}

COMMAND_cat_archive() { #<C>
#<CH> usage:  cat-archive <archive-name>
#<CH>
#<CH> print the selected archive in standard output. Use list-archives to
#<CH> get a list of the available ones.
   local name="${1:-""}"
   local filename="archives/$name.tar.gz"
   if ! [ -f "$filename" ] ; then
      COMMAND_list_archives
      LOGDIE "unknown archive '$name'"
   fi
   INFO "sending tar.gz archive for $name on standard output"
   cat "$filename"
}

COMMAND_commands() { #<C>
#<CH> usage:  commands
#<CH>
#<CH> Print a list of available commands
   commands
}

COMMAND_docs() { #<C>
#<CH> usage:  docs [<doc-name>]
#<CH>
#<CH> print some documentation item. When called standalone, it will
#<CH> display a list of available documentation files; otherwise, it will
#<CH> try to show the provided file identifer.
   if [ $# -gt 0 ] ; then
      docs_show "$1"
   else
      docs_list
   fi
}

COMMAND_help() { #<C>
#<CH> usage:  help
#<CH>
#<CH> Print a help message
   help
}

COMMAND_list_archives() { #<C>
#<CH> usage:  list-archives
#<CH>
#<CH> list all available archives
   printf '%s\n' 'Available archives:'
   ls archives/*.tar.gz | sed 's#^archives/#- #;s/\.tar.gz$//'
}

# Hint: leave this COMMAND_shell function, it provides a handy entry point
COMMAND_shell() { #<C>
#<CH> usage:  shell
#<CH>
#<CH> Run a shell
   exec /bin/sh -l
}

COMMAND_wrapper() { #<C>
#<CH> usage:  wrapper
#<CH>
#<CH> print out a shell command to ease calling the docker image
#<CH>
#<CH> IMAGE='@@@:latest' # or whatever it's called in the system
#<CH> docker run --rm "$IMAGE" wrapper > command
#<CH> chmod +x command
#<CH> ./command ... # no more docker run.. needed
   cat script/wrapper
}

############################################################################
# Main function, makes sure only stuff starting with COMMAND_ is run

_docs_list() {
   cat docs/text/list
}

_docs_show() {
   local id="$1"
   local filename="$(
      ls docs/text/* | grep '^docs/text/0*'"$id"'\(\..\+\)\?\.txt$')"
   if [ ! -r "$filename" ] ; then
      _docs_list
      LOGDIE "missing required document id $id"
   fi
   cat "$filename"
}

main() {
   local command="${1:-"help"}"
   [ "$#" -eq 0 ] || shift

   local function="$(printf %s "COMMAND_$command" | sed -e 's/-/_/g')"
   if ! type "$function" >/dev/null 2>&1 ; then
      help
      LOGDIE "unknown command '$command'"
   fi

   set -eu
   cd "$(dirname "$0")"
   "$function" "$@"
}


############################################################################
# Postamble of the documenation, start rows with #<G>

#<H>


############################################################################
############################################################################
##
##      You should not need to go further down below
##
############################################################################
############################################################################

############################################################################
# Help system.
# See https://github.polettix.it/ETOOBUSY/2020/03/20/shell-script-help/
# Tag functions as "commands" by putting "#<C>" at the end of the sub
# declaration line.
# Mark comments meant for help by starting them with '#<H>'
# Mark comments meant for help on specific command with '#<CH>'
# See below for examples.

commands() { #<command>
#<help> usage: commands
#<help> print a list of available commands.
   {
   	printf 'Available commands:\n'
      sed -ne '/#<C> *$/{s/COMMAND_\([a-zA-Z0-9_]*\).*/- \1/;s/_/-/g;p}' "$0"
   } >&2
}

help() { #<command>
#<help> usage: help
#<help> print help for all available commands
   local image
   image="$(printf '%s' "$DIBS_IMAGE" | sed -e 's#/#\\/#g')"
   {
      sed -ne '
         /^#<H>/{
            s/^#<H> \?//
         '" s/@@@/$image/g  "'
            p
         }
         /#<C> *$/{s/COMMAND_\([a-zA-Z0-9_]*\).*/\n- \1/;s/_/-/g;p}
         /^#<CH>/{
            s/^#<CH>//
            s/^ /    /
         '" s/@@@/$image/ "'
            p
         }
      ' "$0"
   } >&2
}

############################################################################
# Various utilities to protect strings
# See https://github.polettix.it/ETOOBUSY/2020/03/22/shell-quoting-for-exec/
# See https://github.polettix.it/ETOOBUSY/2020/03/23/shell-dynamic-args/

array_freeze() { #<command>
#<help> usage: array_freeze [<arg> [<arg> [...]]]
#<help> freeze an argument array into a single string, printed on standard
#<help> output. When collected in $string, the argument array can be
#<help> restored with:
#<help>      exec "set -- $string"
   local i
   for i do
      printf '%s\n' "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/"
   done
   printf ' '
}

quote () { #<command>
#<help> usage: quote <string-to-quote-as-a-single-argument>
#<help> quote a string to be used in exec and its siblings (e.g. remote ssh)
   printf %s\\n "$1" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/'/"
}

############################################################################
# Logging functions
# See https://github.polettix.it/ETOOBUSY/2020/03/24/shell-logging-helpers/
_LOG() {
   : ${LOGLEVEL:='INFO'}
   LEVELS='
TRACE  TRACE DEBUG INFO WARN ERROR FATAL
DEBUG        DEBUG INFO WARN ERROR FATAL
INFO               INFO WARN ERROR FATAL
WARN                    WARN ERROR FATAL
ERROR                        ERROR FATAL
FATAL                              FATAL
   '
   local timestamp="$(date '+%Y-%m-%dT%H%M%S%z')"
   if printf '%s' "$LEVELS" \
         | grep "^$LOGLEVEL .* $1" >/dev/null 2>&1 ; then
      printf >&2 '[''%s] [''%5s] %s\n' "$timestamp" "$@"
   fi
}

set_LOGLEVEL() { #<command>
#<help> usage: set_LOGLEVEL <level>
#<help> set the LOGLEVEL variable to `level`, which acts as a threshold
#<help> for printing messages. Choose one of the available levels:
#<help> TRACE DEBUG INFO WARN ERROR FATAL
   LEVELS='
xTRACE
xDEBUG
xINFO
xWARN
xERROR
xFATAL
'
   if printf '%s' "$LEVELS" | grep "^x$1$" >/dev/null 2>&1 ; then
      LOGLEVEL="$1"
   else
      printf 'Invalid log level <%s>, using INFO instead\n' "$1"
      LOGLEVEL='INFO'
   fi
}

TRACE()  { _LOG TRACE "$*"; }    #<command>
#<help> usage: TRACE message
#<help> output a log message at TRACE level, if enabled

DEBUG()  { _LOG DEBUG "$*"; }    #<command>
#<help> usage: DEBG message
#<help> output a log message at DEBUG level, if enabled

INFO()   { _LOG INFO  "$*"; }    #<command>
#<help> usage: INFO message
#<help> output a log message at INFO level, if enabled

WARN()   { _LOG WARN  "$*"; }    #<command>
#<help> usage: WARN message
#<help> output a log message at WARN level, if enabled

ERROR()  { _LOG ERROR "$*"; }    #<command>
#<help> usage: ERROR message
#<help> output a log message at ERROR level, if enabled

FATAL()  { _LOG FATAL "$*"; }    #<command>
#<help> usage: FATAL message
#<help> output a log message at FATAL level, if enabled

LOGDIE() { FATAL "$*"; exit 1; } #<command>
#<help> usage: LOGDIE message
#<help> output a log message at FATAL level and exit with code 1


############################################################################
# Test functions.
# See: https://github.polettix.it/ETOOBUSY/2020/03/25/shell-variable-is_defined/
# See: https://github.polettix.it/ETOOBUSY/2020/03/26/shell-variable-is_true/
# See: https://github.polettix.it/ETOOBUSY/2020/03/27/shell-variable-is_lengthy/

is_var_defined () { eval "[ -n \"\${$1+ok}\" ]" ; } #<command>
#<help> usage: is_var_defined <variable-name>
#<help> test whether `variable-name` is defined (i.e. set) or not

is_var_true() { #<command>
#<help> usage: is_var_true <variable-name>
#<help> test whether `variable-name` holds a true value. An undefined variable
#<help> is false. Empty and 0 values are false. Everything else is true.
   local value
   eval 'value="${'"$1"':-"0"}"'
   [ "$value" != '0' ]
}

is_value_true() { #<command>
#<help> usage: is_value_true [<value>]
#<help> test whether `value` is true. An empty input list is false. If $1
#<help> is set, empty and 0 values are false. Everything else is true.
   [ $# -gt 0 ] || return 1    # empty input list -> false
   [ "${1:-"0"}" != '0' ]
}

is_var_lengthy() { #<command>
#<help> usage: is_var_lengthy <variable-name>
#<help> test whether <variable-name> is set and holds a non-empty value.
   local value
   eval 'value="${'"$1"':-""}"'
   [ -n "$value" ]
}
is_value_lengthy() { [ $# -gt 0 ] && [ -n "$1" ] ; } #<command>
#<help> usage: is_value_lengthy [<value>]
#<help> test whether the argument list is not empty and the first value
#<help> is not empty as well.


############################################################################
# Everything as a sub-command.
# See https://github.polettix.it/ETOOBUSY/2020/03/19/a-shell-approach/
# Hint: keep this at the bottom and change the string with something
# new/random for each new script.

#<help>
grep -- "keep on wrocking in a free world" "$0" >/dev/null 2>&1 && main "$@"
